#! /usr/bin/perl

use warnings; use strict;
use Data::Dumper;

use lib $ENV{HOME} . '/perl5/lib/perl5'; #  look for a local::lib in ~
use lib             '../perl5/lib/perl5'; #  ... then in this repo

use FindBin;
use lib "$FindBin::Bin/../lib";

use Log::Any qw($log);

use Log::Any::Adapter;
Log::Any::Adapter->set('Stderr');




my $init_repo           = 0; # should we create a repo if it doesn't exist 
                             # mostly only useful for testing new vesions of the script with repos in /tmp

my $repo_path; 
my $use_cwd             = 0; # when true, and git-spam is in a git repo, commit there
                             # when false, confirm that the user means cwd first.

my $on_test_repo        =0;  # when true, use a repo in /tmp for nonsense commits
                             # (overridden by use_cwd)

use Getopt::Long;
use Pod::Usage; 

my $data   = "file.dat";
my $length = 24;
my $verbose;

GetOptions(
    'help|?'    => \my $help,
    man         => \my $man,
                
#   "length=i"  => \$length,    # numeric
#   "verbose"   => \$verbose    # flag

    "test-repo" => \$on_test_repo, # 

    "repack=i"  => \my $repack,
    #   --repack=<num commits>      # 

    "path=s"    => \$repo_path, # 
    "cwd|f"     => \$use_cwd    # 

) or pod2usage(2);


pod2usage(1) if $help;
pod2usage(-exitval => 0, -verbose => 2) if $man;

# use Getopt::Long ... parse options, and set / validate them


if ($on_test_repo) {
    my $scratch_repo = "/tmp/git-spam-repo-";
    $repo_path = ( sort glob "$scratch_repo*" )[-1];  # the last one, whatever.

    # ... and we didn't find a one
    if (not $repo_path) { 
        # ... create a new repo
        $repo_path = sprintf "/%s%s",$scratch_repo,$$;
        $init_repo = 1;
    }
}

# Guess where they want the commits,
if (not $repo_path or $use_cwd) {
    # Am I in a git repo?
    chomp( $repo_path = ` git rev-parse --show-toplevel ` );

    if (not $use_cwd) { 
        if ($repo_path) {
            print "Going to start doing bogus commits in $repo_path\nStrike enter to continue. ";
            <>
        }
        else {
            die "No repo_path provided, I don't have any place to generate spam commits";
        }
    }
}

if ($init_repo and -d $repo_path) {
    die "can't init a repo in a path that exists"
}
if (not $init_repo and not -d $repo_path) {
    die "can't use a repo that doesn't exist"
}

$log->tracef(
    "GIT using '%s' and init_repo=%s",
    $repo_path,
    $init_repo,
);

use Git::Spam::Command;
my $program = Git::Spam::Command->new();
# $program->options( $value );

# set up the git repo:

use Git::Repository;
Git::Repository->run( init => $repo_path, )
    if $init_repo;

$program->repo(
    Git::Repository->new(
        work_tree => $repo_path
    )
);

exit run $program;

__END__

=head1 NAME

git-spam - generate commits on a git repo 

=head1 SYNOPSIS

    git-spam 
        -f  / -cwd                  # do the bogus commits in the repo in your cwd
        --path=/path/to/workdir/    # do the commits on the supplied working copy
        --test-repo                 # create a test repo in /tmp/ and commit there

=head1 ARGUMENTS

=head2 none

There are currently no arguments.

=head1 OPTIONS

=head2 none

You currently have no control over how this software behaves.

=head2 help|h

Display help and usage

=head1 LICENSE AND COPYRIGHT

This software is not for public consumption, and is not distributed *at all*.
Please inform the author if you happen upon this software in the wild.
